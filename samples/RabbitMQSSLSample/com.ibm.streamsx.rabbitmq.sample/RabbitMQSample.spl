// *******************************************************************************
// * Copyright (C)2016,2017 International Business Machines Corporation and *
// * others. All Rights Reserved. *
// *******************************************************************************
//
namespace com.ibm.streamsx.rabbitmq.sample ;

use com.ibm.streamsx.rabbitmq::* ;

/**
 * Example of using a [RabbitMQSource] and [RabbitMQSink]. 
 * Connections are made via SSL. The user must put the keystore.jks
 * and truststore.jks files in the application's 'etc/' directory.
 * 
 * This assumes that the topic has already been created
 * 
 */
composite RabbitMQSSLSample
{
	param
		expression<rstring> $hostAndPort : "rabbitHost:5671";
		expression<rstring> $exchangeName : "myPhilosophicalExchange"; 
		expression<rstring> $routing_key :  "What is reality?";
		expression<boolean> $useSSL : true;
		expression<rstring> $keyStorePath : getThisToolkitDir() + "/etc/keystore.jks";
		expression<rstring> $keyStorePassword : "MySecretPassword";
		expression<rstring> $trustStorePath : getThisToolkitDir() + "/etc/truststore.jks";
		expression<rstring> $trustStorePassword : "MySecretPassword";
	graph

		//create some messages and send to RabbitMQSink
		stream<rstring message, rstring routing_key> OutputStream = Beacon()
		{
			param
				period : 1.0 ;
			output
				OutputStream : message = "What is friendship and why do we need it?", routing_key =
					$routing_key ;
		}

		() as RabbitMQSinkOp = RabbitMQSink(OutputStream)
		{
			param
				hostAndPort : $hostAndPort;
				exchangeName : $exchangeName;
				useSSL : $useSSL;
				keyStorePath : $keyStorePath;
				keyStorePassword : $keyStorePassword;
				trustStorePath : $trustStorePath;
				trustStorePassword : $trustStorePassword;				
				/* You can also specify username, password, exchangeType.
				 * See SPL Docs for more details. 
				 */
		}

		stream<rstring message, rstring routing_key>  RabbitMQStream = RabbitMQSource()
		{
			param
				hostAndPort : $hostAndPort;
				exchangeName : $exchangeName;
				routingKey : $routing_key; 
				useSSL : $useSSL;
				keyStorePath : $keyStorePath;
				keyStorePassword : $keyStorePassword;
				trustStorePath : $trustStorePath;
				/* You can also specify username, password, exchangeType, queueName.
				 * See SPL Docs for more details. 
				 */
		}

		() as SinkOp = Custom(RabbitMQStream)
		{
			logic
				onTuple RabbitMQStream : println("Message: " +(rstring) RabbitMQStream) ;
		}

}
